An interpreter might sometimes do whole program syntax analysis but
it can only find errors in the program while running it since an
interpreter evaluates the program dynamically.

Here is one example that might illustrate this.

Try to compile this C program using a C compiler:

```
#include<stdlib.h>
int main(){
  if (rand() % 1 < 0.5) {
    exit(0);
  } else {
    int x=1/0;
  }
}
```

which gives:

```
$ cc tmp.c
tmp.c:6:12: warning: division by zero is undefined [-Wdivision-by-zero]
    int x=1/0;
```
           ^~
Now compare to an interpreted language like Python:

```
import random, sys
if random.random() < 0.5:
  sys.exit(0)
else:
  x=1/0
```

if you run the above program through a Python interpreter, about
half the time you will get a division by zero error and the other
half it will exit normally.
